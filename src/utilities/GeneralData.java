package utilities;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import boofcv.struct.ConfigLength;
import graphics.model.data.ColorData;
import javafx.stage.Stage;

public class GeneralData 
{
	public static File sourceFolderMusic = new File(PropertyManager.getSourceFolderMusic());
	public static String destinationFolderMusic = PropertyManager.getDestinationFolderMusic();
	public static String failDestinationFolderMusic = PropertyManager.getFailDestinationFolderMusic();
	public static String resultFolderMusic = PropertyManager.getResultFolderMusic();
	public static String currentFileName = "";
	
	public static Integer numberOfFeatures = 225;
	public static String separator = ",";

	public final static Integer startIndexNotes = 0;
	public final static Integer endIndexNotes = 11;
	public final static Integer startIndexDynamics = 192;
	public final static Integer endIndexDynamics = 199;
	public final static Integer indexTempo = 214;
	public final static Integer indexClef = 215;
	public final static Integer indexTimeSignature = 216;
	public final static Integer indexAnacrusis = 217;
	
	public static Stage primaryStage;
	
	public static int screenWidth = 900;
	public static int screenHeight = 600;
	public static int innerTabHeight = 540;
	public static String currentFilePath = "";
	
	// Adjusts edge threshold for identifying pixels belonging to a line.
	public static float edgeThreshold = 25;
	// Adjust the maximum number of found lines in the image.
	public static int maxLines = 50;
	
	public static double splitFraction = 0.05;
	public static ConfigLength minimumSide = ConfigLength.relative(0.1, 0);
	
	public static int maxNumberOfSides = 100;
	public static int circleThreshold = 50;
	
	public static ArrayList<ColorData> listOfColors = new ArrayList<ColorData>();
	
	public static enum Direction		{NORTHWEST, NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST}
	public static enum Hough			{POLAR, FOOT, FOOT_SUBIMAGE}
	public enum ScreenType 				{GRAPHICS, MUSIC, ASSOCIATION}
	public static enum PainterLabels	{BRUEGEL, MONDRIAAN, PICASSO, RUBENS}	
	
	private static String oldLine8th = "<type>8th</type>";
	private static String newLine8th = "<type>eighth</type>";
	private static String oldLine16th = "<type>16th</type>";
	private static String newLine16th = "<type>sixteenth</type>";
	
	public final static Integer numberOfMusicFeatures = 224;
	public final static Integer numberOfGraphicFeatures = 168;
	public static boolean associationVerbose = false;
	public static boolean graphicsVerbose = false;
	public static boolean musicVerbose = false;
	
	// Method to remove the DTD line and change 16th to sixteenth in xml files generated by Musescore.
	public static void preprocessMusicFiles()
	{
		try 
		{
			for (final File fileEntry : sourceFolderMusic.listFiles())
		    {
				BufferedReader reader = new BufferedReader(new FileReader(fileEntry));
				BufferedWriter writer = new BufferedWriter(new FileWriter(destinationFolderMusic + fileEntry.getName()));
			
				String currentLine;
				int counter = 0;
				
				while((currentLine = reader.readLine()) != null) 
				{
					if (counter == 1)
						// Do nothing.
						;
					else if (currentLine.contains(oldLine8th))
						writer.write(newLine8th + System.getProperty("line.separator"));
					else if (currentLine.contains(oldLine16th))
						writer.write(newLine16th + System.getProperty("line.separator"));
					else
						writer.write(currentLine + System.getProperty("line.separator"));
					
					counter++;
				}
				
				reader.close();
				writer.close();
		    }		
		} 
		catch (IOException e) { e.printStackTrace(); }	
	}
	 
    public static void preprocessFailFiles(File folder)
    {
        try
        {
            for (final File fileEntry : folder.listFiles()) 
            {
                BufferedReader reader = new BufferedReader(new FileReader(fileEntry));
                BufferedWriter writer = new BufferedWriter(new FileWriter(failDestinationFolderMusic + fileEntry.getName()));
             
                String currentLine;
                int counter = 0;
                 
                while((currentLine = reader.readLine()) != null) 
                {
                    if (counter == 1)
                        // Do nothing.
                        ;
                    else if (currentLine.contains(oldLine8th))
                        writer.write(newLine8th + System.getProperty("line.separator"));
                    else if (currentLine.contains(oldLine16th))
                        writer.write(newLine16th + System.getProperty("line.separator"));
                    else
                        writer.write(currentLine + System.getProperty("line.separator"));
                     
                    counter++;
                }
                 
                reader.close();
                writer.close();
            }       
        } 
        catch (IOException e) { e.printStackTrace(); }  
    }
	
	public static void resetColors()
	{
		for (ColorData currentColor : listOfColors)
			currentColor.setPercentage(0.0);
	}
}
